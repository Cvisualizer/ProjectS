状態 40 conflicts: 1 shift/reduce


文法

    0 $accept: program $end

    1 program: glbl_decl

    2 glbl_decl: %empty
    3          | glbl_decl decl ';'
    4          | glbl_decl func_def
    5          | glbl_decl error ';'

    6 decl: TYPE ID
    7     | TYPE f_head
    8     | TYPE ',' ID
    9     | TYPE ',' f_head

   10 @1: %empty

   11 f_head: ID @1 '(' p_list ')'

   12 p_list: %empty
   13       | p_decl
   14       | p_list ',' p_decl

   15 p_decl: TYPE ID

   16 $@2: %empty

   17 func_def: TYPE f_head '{' $@2 decl_list st_list '}'

   18 $@3: %empty

   19 block: '{' $@3 decl_list st_list '}'

   20 decl_list: %empty
   21          | decl_list decl ';'

   22 st_list: stmnt
   23        | st_list stmnt

   24 stmnt: block
   25      | expr ';'
   26      | READ LHS ';'
   27      | WRITE expr ';'
   28      | if_part

   29 @4: %empty

   30 stmnt: if_part ELSE @4 stmnt
   31      | RETURN ';'
   32      | RETURN expr ';'

   33 @5: %empty

   34 if_part: IF '(' expr ')' @5 stmnt

   35 LHS: ID

   36 expr: LHS '=' expr
   37     | expr RELOP expr
   38     | expr ADDOP expr
   39     | expr MULOP expr
   40     | '(' expr ')'
   41     | ADDOP expr
   42     | ID '(' arg_list ')'
   43     | ID
   44     | NUM

   45 arg_list: %empty
   46         | expr
   47         | arg_list ',' expr


出現位置の規則による終端

$end (0) 0
'(' (40) 11 34 40 42
')' (41) 11 34 40 42
',' (44) 8 9 14 47
';' (59) 3 5 21 25 26 27 31 32
'=' (61) 36
'{' (123) 17 19
'}' (125) 17 19
error (256) 5
IF (258) 34
ELSE (259) 30
READ (260) 26
WRITE (261) 27
RETURN (262) 31 32
TYPE (263) 6 7 8 9 15 17
RELOP (264) 37
ADDOP (265) 38 41
MULOP (266) 39
NUM (267) 44
ID (268) 6 8 11 15 35 42 43
UM (269)


出現位置の規則による非終端

$accept (22)
    左辺: 0
program (23)
    左辺: 1, 右辺: 0
glbl_decl (24)
    左辺: 2 3 4 5, 右辺: 1 3 4 5
decl (25)
    左辺: 6 7 8 9, 右辺: 3 21
f_head (26)
    左辺: 11, 右辺: 7 9 17
@1 (27)
    左辺: 10, 右辺: 11
p_list (28)
    左辺: 12 13 14, 右辺: 11 14
p_decl (29)
    左辺: 15, 右辺: 13 14
func_def (30)
    左辺: 17, 右辺: 4
$@2 (31)
    左辺: 16, 右辺: 17
block (32)
    左辺: 19, 右辺: 24
$@3 (33)
    左辺: 18, 右辺: 19
decl_list (34)
    左辺: 20 21, 右辺: 17 19 21
st_list (35)
    左辺: 22 23, 右辺: 17 19 23
stmnt (36)
    左辺: 24 25 26 27 28 30 31 32, 右辺: 22 23 30 34
@4 (37)
    左辺: 29, 右辺: 30
if_part (38)
    左辺: 34, 右辺: 28 30
@5 (39)
    左辺: 33, 右辺: 34
LHS (40)
    左辺: 35, 右辺: 26 36
expr (41)
    左辺: 36 37 38 39 40 41 42 43 44, 右辺: 25 27 32 34 36 37 38
    39 40 41 46 47
arg_list (42)
    左辺: 45 46 47, 右辺: 42 47


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (glbl_decl)

    program    go to state 1
    glbl_decl  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: glbl_decl .
    3 glbl_decl: glbl_decl . decl ';'
    4          | glbl_decl . func_def
    5          | glbl_decl . error ';'

    error  shift, and go to state 4
    TYPE   shift, and go to state 5

    $end  reduce using rule 1 (program)

    decl      go to state 6
    func_def  go to state 7


State 3

    0 $accept: program $end .

    $default  accept


State 4

    5 glbl_decl: glbl_decl error . ';'

    ';'  shift, and go to state 8


State 5

    6 decl: TYPE . ID
    7     | TYPE . f_head
    8     | TYPE . ',' ID
    9     | TYPE . ',' f_head
   17 func_def: TYPE . f_head '{' $@2 decl_list st_list '}'

    ID   shift, and go to state 9
    ','  shift, and go to state 10

    f_head  go to state 11


State 6

    3 glbl_decl: glbl_decl decl . ';'

    ';'  shift, and go to state 12


State 7

    4 glbl_decl: glbl_decl func_def .

    $default  reduce using rule 4 (glbl_decl)


State 8

    5 glbl_decl: glbl_decl error ';' .

    $default  reduce using rule 5 (glbl_decl)


State 9

    6 decl: TYPE ID .
   11 f_head: ID . @1 '(' p_list ')'

    '('       reduce using rule 10 (@1)
    $default  reduce using rule 6 (decl)

    @1  go to state 13


State 10

    8 decl: TYPE ',' . ID
    9     | TYPE ',' . f_head

    ID  shift, and go to state 14

    f_head  go to state 15


State 11

    7 decl: TYPE f_head .
   17 func_def: TYPE f_head . '{' $@2 decl_list st_list '}'

    '{'  shift, and go to state 16

    $default  reduce using rule 7 (decl)


State 12

    3 glbl_decl: glbl_decl decl ';' .

    $default  reduce using rule 3 (glbl_decl)


State 13

   11 f_head: ID @1 . '(' p_list ')'

    '('  shift, and go to state 17


State 14

    8 decl: TYPE ',' ID .
   11 f_head: ID . @1 '(' p_list ')'

    '('       reduce using rule 10 (@1)
    $default  reduce using rule 8 (decl)

    @1  go to state 13


State 15

    9 decl: TYPE ',' f_head .

    $default  reduce using rule 9 (decl)


State 16

   17 func_def: TYPE f_head '{' . $@2 decl_list st_list '}'

    $default  reduce using rule 16 ($@2)

    $@2  go to state 18


State 17

   11 f_head: ID @1 '(' . p_list ')'

    TYPE  shift, and go to state 19

    $default  reduce using rule 12 (p_list)

    p_list  go to state 20
    p_decl  go to state 21


State 18

   17 func_def: TYPE f_head '{' $@2 . decl_list st_list '}'

    $default  reduce using rule 20 (decl_list)

    decl_list  go to state 22


State 19

   15 p_decl: TYPE . ID

    ID  shift, and go to state 23


State 20

   11 f_head: ID @1 '(' p_list . ')'
   14 p_list: p_list . ',' p_decl

    ','  shift, and go to state 24
    ')'  shift, and go to state 25


State 21

   13 p_list: p_decl .

    $default  reduce using rule 13 (p_list)


State 22

   17 func_def: TYPE f_head '{' $@2 decl_list . st_list '}'
   21 decl_list: decl_list . decl ';'

    IF      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    RETURN  shift, and go to state 29
    TYPE    shift, and go to state 30
    ADDOP   shift, and go to state 31
    NUM     shift, and go to state 32
    ID      shift, and go to state 33
    '('     shift, and go to state 34
    '{'     shift, and go to state 35

    decl     go to state 36
    block    go to state 37
    st_list  go to state 38
    stmnt    go to state 39
    if_part  go to state 40
    LHS      go to state 41
    expr     go to state 42


State 23

   15 p_decl: TYPE ID .

    $default  reduce using rule 15 (p_decl)


State 24

   14 p_list: p_list ',' . p_decl

    TYPE  shift, and go to state 19

    p_decl  go to state 43


State 25

   11 f_head: ID @1 '(' p_list ')' .

    $default  reduce using rule 11 (f_head)


State 26

   34 if_part: IF . '(' expr ')' @5 stmnt

    '('  shift, and go to state 44


State 27

   26 stmnt: READ . LHS ';'

    ID  shift, and go to state 45

    LHS  go to state 46


State 28

   27 stmnt: WRITE . expr ';'

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    '('    shift, and go to state 34

    LHS   go to state 41
    expr  go to state 47


State 29

   31 stmnt: RETURN . ';'
   32      | RETURN . expr ';'

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    ';'    shift, and go to state 48
    '('    shift, and go to state 34

    LHS   go to state 41
    expr  go to state 49


State 30

    6 decl: TYPE . ID
    7     | TYPE . f_head
    8     | TYPE . ',' ID
    9     | TYPE . ',' f_head

    ID   shift, and go to state 9
    ','  shift, and go to state 10

    f_head  go to state 50


State 31

   41 expr: ADDOP . expr

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    '('    shift, and go to state 34

    LHS   go to state 41
    expr  go to state 51


State 32

   44 expr: NUM .

    $default  reduce using rule 44 (expr)


State 33

   35 LHS: ID .
   42 expr: ID . '(' arg_list ')'
   43     | ID .

    '('  shift, and go to state 52

    '='       reduce using rule 35 (LHS)
    $default  reduce using rule 43 (expr)


State 34

   40 expr: '(' . expr ')'

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    '('    shift, and go to state 34

    LHS   go to state 41
    expr  go to state 53


State 35

   19 block: '{' . $@3 decl_list st_list '}'

    $default  reduce using rule 18 ($@3)

    $@3  go to state 54


State 36

   21 decl_list: decl_list decl . ';'

    ';'  shift, and go to state 55


State 37

   24 stmnt: block .

    $default  reduce using rule 24 (stmnt)


State 38

   17 func_def: TYPE f_head '{' $@2 decl_list st_list . '}'
   23 st_list: st_list . stmnt

    IF      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    RETURN  shift, and go to state 29
    ADDOP   shift, and go to state 31
    NUM     shift, and go to state 32
    ID      shift, and go to state 33
    '('     shift, and go to state 34
    '{'     shift, and go to state 35
    '}'     shift, and go to state 56

    block    go to state 37
    stmnt    go to state 57
    if_part  go to state 40
    LHS      go to state 41
    expr     go to state 42


State 39

   22 st_list: stmnt .

    $default  reduce using rule 22 (st_list)


State 40

   28 stmnt: if_part .
   30      | if_part . ELSE @4 stmnt

    ELSE  shift, and go to state 58

    ELSE      [reduce using rule 28 (stmnt)]
    $default  reduce using rule 28 (stmnt)


State 41

   36 expr: LHS . '=' expr

    '='  shift, and go to state 59


State 42

   25 stmnt: expr . ';'
   37 expr: expr . RELOP expr
   38     | expr . ADDOP expr
   39     | expr . MULOP expr

    RELOP  shift, and go to state 60
    ADDOP  shift, and go to state 61
    MULOP  shift, and go to state 62
    ';'    shift, and go to state 63


State 43

   14 p_list: p_list ',' p_decl .

    $default  reduce using rule 14 (p_list)


State 44

   34 if_part: IF '(' . expr ')' @5 stmnt

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    '('    shift, and go to state 34

    LHS   go to state 41
    expr  go to state 64


State 45

   35 LHS: ID .

    $default  reduce using rule 35 (LHS)


State 46

   26 stmnt: READ LHS . ';'

    ';'  shift, and go to state 65


State 47

   27 stmnt: WRITE expr . ';'
   37 expr: expr . RELOP expr
   38     | expr . ADDOP expr
   39     | expr . MULOP expr

    RELOP  shift, and go to state 60
    ADDOP  shift, and go to state 61
    MULOP  shift, and go to state 62
    ';'    shift, and go to state 66


State 48

   31 stmnt: RETURN ';' .

    $default  reduce using rule 31 (stmnt)


State 49

   32 stmnt: RETURN expr . ';'
   37 expr: expr . RELOP expr
   38     | expr . ADDOP expr
   39     | expr . MULOP expr

    RELOP  shift, and go to state 60
    ADDOP  shift, and go to state 61
    MULOP  shift, and go to state 62
    ';'    shift, and go to state 67


State 50

    7 decl: TYPE f_head .

    $default  reduce using rule 7 (decl)


State 51

   37 expr: expr . RELOP expr
   38     | expr . ADDOP expr
   39     | expr . MULOP expr
   41     | ADDOP expr .

    $default  reduce using rule 41 (expr)


State 52

   42 expr: ID '(' . arg_list ')'

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    '('    shift, and go to state 34

    $default  reduce using rule 45 (arg_list)

    LHS       go to state 41
    expr      go to state 68
    arg_list  go to state 69


State 53

   37 expr: expr . RELOP expr
   38     | expr . ADDOP expr
   39     | expr . MULOP expr
   40     | '(' expr . ')'

    RELOP  shift, and go to state 60
    ADDOP  shift, and go to state 61
    MULOP  shift, and go to state 62
    ')'    shift, and go to state 70


State 54

   19 block: '{' $@3 . decl_list st_list '}'

    $default  reduce using rule 20 (decl_list)

    decl_list  go to state 71


State 55

   21 decl_list: decl_list decl ';' .

    $default  reduce using rule 21 (decl_list)


State 56

   17 func_def: TYPE f_head '{' $@2 decl_list st_list '}' .

    $default  reduce using rule 17 (func_def)


State 57

   23 st_list: st_list stmnt .

    $default  reduce using rule 23 (st_list)


State 58

   30 stmnt: if_part ELSE . @4 stmnt

    $default  reduce using rule 29 (@4)

    @4  go to state 72


State 59

   36 expr: LHS '=' . expr

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    '('    shift, and go to state 34

    LHS   go to state 41
    expr  go to state 73


State 60

   37 expr: expr RELOP . expr

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    '('    shift, and go to state 34

    LHS   go to state 41
    expr  go to state 74


State 61

   38 expr: expr ADDOP . expr

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    '('    shift, and go to state 34

    LHS   go to state 41
    expr  go to state 75


State 62

   39 expr: expr MULOP . expr

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    '('    shift, and go to state 34

    LHS   go to state 41
    expr  go to state 76


State 63

   25 stmnt: expr ';' .

    $default  reduce using rule 25 (stmnt)


State 64

   34 if_part: IF '(' expr . ')' @5 stmnt
   37 expr: expr . RELOP expr
   38     | expr . ADDOP expr
   39     | expr . MULOP expr

    RELOP  shift, and go to state 60
    ADDOP  shift, and go to state 61
    MULOP  shift, and go to state 62
    ')'    shift, and go to state 77


State 65

   26 stmnt: READ LHS ';' .

    $default  reduce using rule 26 (stmnt)


State 66

   27 stmnt: WRITE expr ';' .

    $default  reduce using rule 27 (stmnt)


State 67

   32 stmnt: RETURN expr ';' .

    $default  reduce using rule 32 (stmnt)


State 68

   37 expr: expr . RELOP expr
   38     | expr . ADDOP expr
   39     | expr . MULOP expr
   46 arg_list: expr .

    RELOP  shift, and go to state 60
    ADDOP  shift, and go to state 61
    MULOP  shift, and go to state 62

    $default  reduce using rule 46 (arg_list)


State 69

   42 expr: ID '(' arg_list . ')'
   47 arg_list: arg_list . ',' expr

    ','  shift, and go to state 78
    ')'  shift, and go to state 79


State 70

   40 expr: '(' expr ')' .

    $default  reduce using rule 40 (expr)


State 71

   19 block: '{' $@3 decl_list . st_list '}'
   21 decl_list: decl_list . decl ';'

    IF      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    RETURN  shift, and go to state 29
    TYPE    shift, and go to state 30
    ADDOP   shift, and go to state 31
    NUM     shift, and go to state 32
    ID      shift, and go to state 33
    '('     shift, and go to state 34
    '{'     shift, and go to state 35

    decl     go to state 36
    block    go to state 37
    st_list  go to state 80
    stmnt    go to state 39
    if_part  go to state 40
    LHS      go to state 41
    expr     go to state 42


State 72

   30 stmnt: if_part ELSE @4 . stmnt

    IF      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    RETURN  shift, and go to state 29
    ADDOP   shift, and go to state 31
    NUM     shift, and go to state 32
    ID      shift, and go to state 33
    '('     shift, and go to state 34
    '{'     shift, and go to state 35

    block    go to state 37
    stmnt    go to state 81
    if_part  go to state 40
    LHS      go to state 41
    expr     go to state 42


State 73

   36 expr: LHS '=' expr .
   37     | expr . RELOP expr
   38     | expr . ADDOP expr
   39     | expr . MULOP expr

    RELOP  shift, and go to state 60
    ADDOP  shift, and go to state 61
    MULOP  shift, and go to state 62

    $default  reduce using rule 36 (expr)


State 74

   37 expr: expr . RELOP expr
   37     | expr RELOP expr .
   38     | expr . ADDOP expr
   39     | expr . MULOP expr

    ADDOP  shift, and go to state 61
    MULOP  shift, and go to state 62

    $default  reduce using rule 37 (expr)


State 75

   37 expr: expr . RELOP expr
   38     | expr . ADDOP expr
   38     | expr ADDOP expr .
   39     | expr . MULOP expr

    MULOP  shift, and go to state 62

    $default  reduce using rule 38 (expr)


State 76

   37 expr: expr . RELOP expr
   38     | expr . ADDOP expr
   39     | expr . MULOP expr
   39     | expr MULOP expr .

    $default  reduce using rule 39 (expr)


State 77

   34 if_part: IF '(' expr ')' . @5 stmnt

    $default  reduce using rule 33 (@5)

    @5  go to state 82


State 78

   47 arg_list: arg_list ',' . expr

    ADDOP  shift, and go to state 31
    NUM    shift, and go to state 32
    ID     shift, and go to state 33
    '('    shift, and go to state 34

    LHS   go to state 41
    expr  go to state 83


State 79

   42 expr: ID '(' arg_list ')' .

    $default  reduce using rule 42 (expr)


State 80

   19 block: '{' $@3 decl_list st_list . '}'
   23 st_list: st_list . stmnt

    IF      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    RETURN  shift, and go to state 29
    ADDOP   shift, and go to state 31
    NUM     shift, and go to state 32
    ID      shift, and go to state 33
    '('     shift, and go to state 34
    '{'     shift, and go to state 35
    '}'     shift, and go to state 84

    block    go to state 37
    stmnt    go to state 57
    if_part  go to state 40
    LHS      go to state 41
    expr     go to state 42


State 81

   30 stmnt: if_part ELSE @4 stmnt .

    $default  reduce using rule 30 (stmnt)


State 82

   34 if_part: IF '(' expr ')' @5 . stmnt

    IF      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    RETURN  shift, and go to state 29
    ADDOP   shift, and go to state 31
    NUM     shift, and go to state 32
    ID      shift, and go to state 33
    '('     shift, and go to state 34
    '{'     shift, and go to state 35

    block    go to state 37
    stmnt    go to state 85
    if_part  go to state 40
    LHS      go to state 41
    expr     go to state 42


State 83

   37 expr: expr . RELOP expr
   38     | expr . ADDOP expr
   39     | expr . MULOP expr
   47 arg_list: arg_list ',' expr .

    RELOP  shift, and go to state 60
    ADDOP  shift, and go to state 61
    MULOP  shift, and go to state 62

    $default  reduce using rule 47 (arg_list)


State 84

   19 block: '{' $@3 decl_list st_list '}' .

    $default  reduce using rule 19 (block)


State 85

   34 if_part: IF '(' expr ')' @5 stmnt .

    $default  reduce using rule 34 (if_part)
